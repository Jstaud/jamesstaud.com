name: Deploy Infrastructure and Application

on:
  push:
    branches:
      - initial-app
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10



jobs:
  build_backend:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: jamesstaudcom-backend
      DOCKER_HUB_REPO: jamesstaud/backend.jamesstaud.com
      DOCKERFILE_PATH: ./backend/Dockerfile
    steps:
      - uses: actions/checkout@v2
      
      - name: Convert repository name to lowercase
        id: repo
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          echo "::set-output name=repo::$(echo $REPO_NAME | awk '{print tolower($0)}')"
      
      - name: Build the Docker image
        run: docker build . --file ${{ env.DOCKERFILE_PATH }} --tag ${{ env.IMAGE_NAME }}
      
      - name: Run the Docker container
        run: |
          docker run --name ${{ env.IMAGE_NAME }} -d \
          -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
          -e OPENAI_ORGANIZATION_ID=${{ secrets.OPENAI_ORGANIZATION_ID }} \
          -e MONGODB_URI=${{ secrets.MONGODB_URI }} \
          ${{ env.IMAGE_NAME }}

      - name: Push the Docker image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker tag ${{ env.IMAGE_NAME }} ${{ env.DOCKER_HUB_REPO }}
          docker push ${{ env.DOCKER_HUB_REPO }}

  build_frontend:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: jamesstaudcom-frontend
      DOCKER_HUB_REPO: jamesstaud/jamesstaud.com
      DOCKERFILE_PATH: ./frontend/Dockerfile
    steps:
      - uses: actions/checkout@v2
      
      - name: Convert repository name to lowercase
        id: repo
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          echo "::set-output name=repo::$(echo $REPO_NAME | awk '{print tolower($0)}')"
      
      - name: Build the Docker image
        run: docker build . --file ${{ env.DOCKERFILE_PATH }} --tag ${{ env.IMAGE_NAME }}
      
      - name: Run the Docker container
        run: |
          docker run --name ${{ env.IMAGE_NAME }} -d \
          -e BACKEND_API_URL=${{ secrets.BACKEND_API_URL }} \
          ${{ env.IMAGE_NAME }}

      - name: Push the Docker image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker tag ${{ env.IMAGE_NAME }} ${{ env.DOCKER_HUB_REPO }}
          docker push ${{ env.DOCKER_HUB_REPO }}

  create_release:
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Get the latest tag
      id: get_latest_tag
      run: |
        LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "")
        if [ -z "$LATEST_TAG" ]; then
          echo "LATEST_TAG=none" >> $GITHUB_ENV
        else
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        fi

    - name: Determine next version
      id: determine_version
      run: |
        if [ -z "${{ env.LATEST_TAG }}" ]; then
          echo "v0.1.0" > next_version.txt
        else
          IFS='.' read -r -a parts <<< "${{ env.LATEST_TAG }}"
          major=${parts[0]#v}
          minor=${parts[1]}
          patch=${parts[2]}
          patch=$((patch + 1))
          echo "v$major.$minor.$patch" > next_version.txt
        fi
        NEXT_VERSION=$(cat next_version.txt)
        echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

    - name: Create new tag
      id: create_tag
      run: |
        git tag ${{ env.NEXT_VERSION }}
        git push origin ${{ env.NEXT_VERSION }}

    - name: Get commit messages since the latest tag
      id: get_release_notes
      run: |
        LATEST_TAG=${{ env.LATEST_TAG }}
        if [ -z "$LATEST_TAG" ]; then
          echo "No tags found. Please create a tag first."
          exit 1
        fi
        RELEASE_NOTES=$(git log $LATEST_TAG..HEAD --pretty=format:"%h - %s")
        echo "::set-output name=notes::$RELEASE_NOTES"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEXT_VERSION }}
        release_name: Release ${{ env.NEXT_VERSION }}
        body: ${{ steps.get_release_notes.outputs.notes }}
        draft: false
        prerelease: false