name: Deploy Infrastructure and Application

on:
  push:
    branches:
      - initial-app
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10



jobs:
  build_backend:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: jamesstaudcom-backend
      DOCKER_HUB_REPO: jamesstaud/backend.jamesstaud.com
    steps:
      - uses: actions/checkout@v2
      
      - name: Convert repository name to lowercase
        id: repo
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          echo "::set-output name=repo::$(echo $REPO_NAME | awk '{print tolower($0)}')"
      
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.IMAGE_NAME }}
      
      - name: Run the Docker container
        run: |
          docker run --name ${{ env.IMAGE_NAME }} -d \
          -e BACKEND_API_URL=${{ secrets.BACKEND_API_URL }} \
          ${{ steps.repo.outputs.repo }}

      - name: Push the Docker image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker tag ${{ env.IMAGE_NAME }} ${{ env.DOCKER_HUB_REPO }}
          docker push ${{ env.DOCKER_HUB_REPO }}

  build_frontend:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: jamesstaudcom-frontend
      DOCKER_HUB_REPO: jamesstaud/jamesstaud.com
    steps:
      - uses: actions/checkout@v2
      
      - name: Convert repository name to lowercase
        id: repo
        run: |
          REPO_NAME="${{ github.repository }}"
          REPO_NAME="${REPO_NAME#*/}"
          echo "::set-output name=repo::$(echo $REPO_NAME | awk '{print tolower($0)}')"
      
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{ env.IMAGE_NAME }}
      
      - name: Run the Docker container
        run: |
          docker run --name ${{ env.IMAGE_NAME }} -d \
          -e BACKEND_API_URL=${{ secrets.BACKEND_API_URL }} \
          ${{ steps.repo.outputs.repo }}

      - name: Push the Docker image to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker tag ${{ env.IMAGE_NAME }} ${{ env.DOCKER_HUB_REPO }}
          docker push ${{ env.DOCKER_HUB_REPO }}

  deploy_backend:
    runs-on: ubuntu-latest
    needs: build_backend
    steps:
      - uses: actions/checkout@v2

      - name: Deploy backend to DigitalOcean App Platform
        uses: digitalocean/app_action@v1.1.5
        with:
          app_name: jamesstaudcom-backend
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  deploy_frontend:
    runs-on: ubuntu-latest
    needs: build_frontend
    steps:
      - uses: actions/checkout@v2

      - name: Deploy frontend to DigitalOcean App Platform
        uses: digitalocean/app_action@v1.1.5
        with:
          app_name: jamesstaudcom-frontend
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy_backend, deploy_frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Generate Release Notes
        id: generate_release_notes
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          # Get the commit messages since the latest tag
          RELEASE_NOTES=$(git log $LATEST_TAG..HEAD --pretty=format:"%h - %s")
          echo "::set-output name=notes::$RELEASE_NOTES"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.generate_release_notes.outputs.notes }}
          draft: false
          prerelease: false